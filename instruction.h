#pragma once

#include "mem.h"

#include <stdint.h>

////////////////////////////////////////////////////////////////////////////////
// Type declarations
////////////////////////////////////////////////////////////////////////////////

typedef uint16_t instruction_id;

typedef error_t (*instruction_pf)(void *);

typedef struct _instruction_info {
	instruction_pf func;
	mem_size extra; // How large (minus the leading 2 bytes) is the instruction?
} instruction_info;

////////////////////////////////////////////////////////////////////////////////
// Constants + helper macros
////////////////////////////////////////////////////////////////////////////////

enum _instruction_name {
	INS_NOP,
	INS_HLT,
	INS_JMPC,
	INS_MOVRC,
	INS_MOVMR,
	INS_ADDRC,
	INS_STORR,
	INS_OUTPR,
	INS_INRP,
	INS_CLI,
	INS_STI,

	INS_NUM_INS
};

#define IS_VALID_INSTRUCTION(id) ((id) < INS_NUM_INS)

////////////////////////////////////////////////////////////////////////////////
// Global variable declarations
////////////////////////////////////////////////////////////////////////////////

extern instruction_info instructions[INS_NUM_INS];
